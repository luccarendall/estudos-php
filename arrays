<!--Definição de sessão: Uma sessão PHP armazena dados no servidor em vez do computador do usuário. Em um ambiente baseado em sessão, cada usuário é identificado por meio de um número exclusivo chamado identificador de sessão ou SID-->
<!--Array na sessão-->

<!--exemplo com array numérico (indexado em número)-->
<?php
 session_start(); // inicia o nosso uso da sessão
 if(isset($_SESSION["valores"]));
    $valores = $_SESSION["valores"];
 else
    $valores = array();
?>

<html><body>
    <form method="POST"> <!--quando vc não coloca action signfica pro firmulário que ele vai ser chamado na propria página. Nesse caso, os dados que estação sendo enviados através do POST são enviado para esta mesma página. Vão aparecer aqui mesmo.-->
        Numero: <input type=number" name=num"/>
        <input type="submit" value="add" name=oper"/>
        <input type="submit" value="del" name=oper"/>
        <input type="submit" value="sort" name=oper"/>
        <input type="submit" value="clear" name=oper"/>
    </form>
    
    <ul> <!--Todo esse código PHP a seguir está dentro dessa ul-->
    <?php
    if(isset ($_POST["num"])){
        switch($_POST["oper"]){
            case "add":
                $valores[] = $_POST["num"]; //isso não causa sobre posição? Não usa spread? Apenas adiciona no final do array? Pq? Pesquisar isso
                break;
            case "del":
                $indice = array_search($_POST["num"], $valores); // array_search() é uma função nativa do php que faz uma pesquisa de um valor dentro de um vetor. Nesse exemplo, ele tá buscando o número que foi digitado, dentro do array $valores. Pra encontrar o indice dele e apagar
                if($indice!='') // validação apenas. Se o index existir, faça tal coisa
                    array_splice($valores,$indice,1); // A função nativa array_splice() é usada para remover ou substituir valores em um array. Nesse caso, remova no array $valores, a partir do $indice, 1 elemento.
                break;
            case "sort":
                sort($valores); // método nativo que ordena o array
                break;
            case "clear":
                $valores = array(); //remove todos os valores do array
                unset($_SESSION["valores"]); // unset - remove os valores também da sessão
                session_destroy(); // finaliza/destrói a sessão
                break;
        }
    }
    // condição de impressão
    if(count($valores)>0) // verifica se tem algum valor, pra colocar na tela
        for($i=0; $i <count($valores); $i++) //$i+=
            echo("<li>".$valores[$i]."</li>"); //vai imprimir uma li com o valor a cada posição do index
    $_SESSION["valores"] = $valores; // Atualiza a sessão com todos os valores atualizados. A sessão serve para que os valores sejam persistidos mesmo com sucessivas requisições.
    ?>
    </ul>
</body></html>

<!--exemplo com array associativo(relaciona um nome. Chave e valor- esse valor podendo ser inclusive outro array)-->
<!--Imagine um tópico com subtópicos, do word mesmo. Pra facilitar a visualização-->
<html><body>
    <?php
    $equipe = array(
        "Comercial" => 
                [ "Ana", "Carlos", "Fabio"],
        "Financeiro" => 
                [ "Joao", "Fabiana"],
        "Operacional" => 
                [ "Beatriz", "Maria", "Eduardo"],
        );
        
    echo("<ul>");
    foreach($equipe as $setor => $funcionarios){ // para cada elemento encontrado em $equipe as $setor apondando para funcionarios, imprima <li>, em seguida o $setor(comercial, financeiro ou operacional), depois faça um <ol> para cada $funcionario as $nome, crie uma <ol> com o nome do funcionario.
        echo("<li>$setor</li><ol>");
        foreach($funcionarios as $nome)
            echo("<li>$nome</li>");
        echo("<ol>");
    }
    echo("</ul>");
    ?>
</body></html>

<!--Atv para o futuro: Criar uma tabela dinâmica usando php e google charts. Use o php para criar as linhas da tabela e as opções, buscando esses dados do array misto $lucro e depois de um banco de dados dinâmico.-->
<?php
  $lucro = [ // alguns meses são texto e outros números do mês
             "jan" => 25000, 2 => 60000, 3 => 45000,
             "abr" => 80000, 5 => 65000, 6 => 50000,
           ]
?>

<!--Criação de arrays e atribuição de valores-->
<?php
//Declarando um array vazio
$carros = array();

//Primeira forma de declaração e atribuição de valores
$carros = Array("Fusca", "Monza", "Passat");

//Segunda forma de declaração e atribuição de valores
$carros = ["Fusca", "Monza", "Passat"];

//Terceira forma de declaração e atribuição de valores
$carros[0] = "Fusca";
$carros[1] = "Monza";
$carros[2] = "Passat";

//Quarta forma de declaração e atribuição de valores
$carros[] = "Fusca";
$carros[] = "Monza";
$carros[] = "Passat";

// Os arrays anteriores são numéricos. Vejamos outros exemplos, agora com vetores associativos. 
// Repare que a principal diferença é a utilização de strings no lugar de números para definir os seus índices.

 //Primeira forma
 $carros = array (
	'vw'        => "Fusca",
	'chevrolet' => "Monza",
	'fiat'      => "Tempra"
 );

 //Segunda forma
 $carros = [
	'vw'        => "Fusca",
	'chevrolet' => "Monza",
	'fiat'      => "Tempra"
 ];

 //Terceira forma
 $carros['vw']        = "Fusca";
 $carros['chevrolet'] = "Monza";
 $carros['fiat']      = "Tempra";
 
//  Por fim, veremos exemplos de array com índices numéricos e associativos. 
// Repare que a sintaxe é parecida com a vista na declaração dos associativos, ou seja, cada par “índice/valor” é separado por ‘=>’

$carros = array (
	'vw'        => "Fusca",
	0           => "Passat",
	'chevrolet' => "Monza",
	1           => "Chevette",
	'fiat'      => "Tempra",
	2           => "Uno"
 );

// print_r($carros);

<!--Remoção de elementos de um array-->

<!--Existem duas formas de remover elementos de um aray:-->
<!--1. Definindo o valor do elemento como vazio. Nesse caso, embora o valor do elemento seja removido, o seu índice permanece no vetor, que também mantém o seu tamanho inicial.-->
<!--    ex: $nome_vetor[1] = ''  | -> setando o item no index 1 como ''-->

<!--2. Outra forma é fazendo uso de duas funções: unset() e array_splice().-->

<!--Exemplo:-->
<?php
 $carros = array ( // array misto
	'vw'        => "Fusca",
	0           => "Passat",
	'chevrolet' => "Monza",
	1           => "Chevette",
	'fiat'      => "Tempra",
	2           => "Uno"
 );
 
 print_r($carros);
 echo "O tamanho atual do array é: " . count($carros);
 echo "\n\n";
 //Definindo o valor do índice 0 como vazio
 $carros[0] = '';

 print_r($carros);
 echo "O tamanho atual do array é: " . count($carros);
 echo "\n\n";

 //Removendo dois elementos do array com unset
 unset($carros['fiat'], $carros[1]);

 print_r($carros);
 echo "O tamanho atual do array é: " . count($carros);
 echo "\n\n";

 //Removendo elementos do array com array_splice
 array_splice($carros, 1,2);

 print_r($carros);
 echo "O tamanho atual do array é: " . count($carros);
 ?>

<!--Funções usadas:-->

<!--print_r(): A função “print_r” imprime os elementos de um array.-->

<!--count():  A função “count” retorna o tamanho (quantidade de elementos) de um array. Essa função, inclusive, é muito útil quando trabalhamos com vetores. Análoga ao array.length() do JS.-->

<!--unset(): A função “unset” recebe como parâmetro o array e índice ou índices que desejamos remover. Além disso, é possível também remover o vetor inteiro, passando-o como parâmetro e sem definir nenhum índice.-->

<!--array.splice(): A função “array_splice” recebe como parâmetros o array a ser manipulado, o offset (índice a partir do qual desejamos excluir elementos) e o length (quantidade de itens que queremos excluir).-->


<!--Arrays multidimensionais-->

<!--O array que será visto no exemplo a seguir é multidimensional. Ou seja, ele é composto por mais de uma dimensão – nesse caso, duas. -->

<!--Olhando para o exemplo, temos:-->


<!--Dois índices principais, associativos, cujas chaves são ‘vermelhas’ e ‘cítricas’.-->

<!--Cada uma dessas chaves possui um novo array numérico, que contém quatro elementos-->
    
    <?php
    $frutas = array (
		"vermelhas" => array( 
		    "melancia", 
		    "cereja", 
		    "framboesa",
		    "morango"
		 ),    
 		
		"citricas" => array(
		    "laranja", 
		    "limao",
		    "abacaxi",
		    "mexerica"
		 ),
    );
     ?>
// As formas vistas nos exemplos anteriores são as mais simples para a criação e inserção de elementos. Entretanto, a linguagem oferece outras formas, por meio do uso de funções como:
     // array_push() - adiciona elementos ao final de um array
    // array_unshift() - adiciona elementos no início de um array

